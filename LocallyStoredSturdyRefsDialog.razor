@using Blazored.LocalStorage
@using Capnp.Rpc
@using Mas.Infrastructure.Common
@using MudBlazor
@namespace Mas.Infrastructure.BlazorComponents

@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject ConnectionManager ConMan

<MudDialog>
    <DialogContent>
        <MudTable T="@StoredSrData"
                  Items="@_bookmarks"
                  Hover="@true"
                  CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="@BookmarksCommited"
                  FixedHeader="@true"
                  Height="600px">
            <ColGroup>
                <col style="width: 15%;"/>
                <col style="width: 5%;"/>
                <col style="width: 5%;"/>
                <col style="width: 20%;"/>
                <col style="width: 45%;"/>
                <col style="width: 10%;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>InterfaceId</MudTh>
                <MudTh>Auto connect?</MudTh>
                <MudTh>Select by default?</MudTh>
                <MudTh>Petname</MudTh>
                <MudTh>Sturdy reference</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="InterfaceId">@context.InterfaceId</MudTd>
                <MudTd DataLabel="Auto connect?">@context.AutoConnect</MudTd>
                <MudTd DataLabel="Select by default?">@context.DefaultSelect</MudTd>
                <MudTd DataLabel="Petname">@context.PetName</MudTd>
                <MudTd DataLabel="Sturdy reference">@context.SturdyRef</MudTd>
                <MudTd DataLabel="Action">
                    @if (context.SturdyRef.Length == 0)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.FiberNew"/>
                    }
                    else
                    {
                        var connected = IsConnected(context);
                        <MudIconButton
                            Icon="@(connected ? Icons.Material.Filled.CastConnected : Icons.Material.Filled.Cast)"
                            Color="@(connected ? Color.Success : Color.Default)"
                            OnClick=@(async () => await Connect(context))/>
                        <MudIconButton Icon=@Icons.Material.Filled.Delete
                                       OnClick=@(async () => await Delete(context))/>
                    }
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="InterfaceId">
                    <MudTextField T="@ulong"
                                  Value="@context.InterfaceId"
                                  ValueChanged="@(v =>
                                                {
                                                    context.InterfaceId = v;
                                                    if (context.DefaultSelect) _bookmarkWithLastDefaultSwitchedOn[context.InterfaceId] = context;
                                                })"
                                  Required/>
                </MudTd>
                <MudTd DataLabel="Auto connect?">
                    <MudSwitch @bind-Value="context.AutoConnect" Color="@Color.Primary"/>
                </MudTd>
                <MudTd DataLabel="Select by default?">
                    <MudSwitch T="@bool"
                               Value="@context.DefaultSelect"
                               ValueChanged="@(s =>
                                             {
                                                 context.DefaultSelect = s;
                                                 _bookmarkWithLastDefaultSwitchedOn[context.InterfaceId] = context;
                                             })"
                               Color="@Color.Primary"/>
                </MudTd>
                <MudTd DataLabel="Petname">
                    <MudTextField @bind-Value="context.PetName"/>
                </MudTd>
                <MudTd DataLabel="Sturdy reference">
                    <MudTextField @bind-Value="context.SturdyRef" Required/>
                </MudTd>
                <MudTd DataLabel="Action"></MudTd>
            </RowEditingTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public Dictionary<ulong, Type> InterfaceIdToType { get; set; } = [];
    [Parameter] public Dictionary<string, Proxy> SturdyRef2Services { get; set; } = [];

    [Parameter] public EventCallback<(ulong, string, string)> ConnectedToInterfaceIdAndSturdyRefAndPetNameChanged { get; set; }

    private List<StoredSrData> _bookmarks = [];

    private readonly Dictionary<ulong, StoredSrData> _bookmarkWithLastDefaultSwitchedOn = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await LocalStorage.ContainKeyAsync("sturdy-ref-store"))
            {
                _bookmarks = await StoredSrData.GetAllData(LocalStorage);
                _bookmarks.Sort();
            }

            _bookmarks.Insert(0, new StoredSrData());
            StateHasChanged();
        }
    }

    private async Task BookmarksCommited()
    {
        Snackbar.Add("Bookmarks updated.");

        if (_bookmarkWithLastDefaultSwitchedOn.Any())
        {
            foreach (var b in _bookmarks)
            {
                if (!_bookmarkWithLastDefaultSwitchedOn.TryGetValue(b.InterfaceId, out var def)) continue;
                if (def.DefaultSelect && b != def) b.DefaultSelect = false;
            }
        }

        await SaveBookmarks();

        if (!string.IsNullOrEmpty(_bookmarks[0].SturdyRef)) _bookmarks.Insert(0, new StoredSrData());
        StateHasChanged();
    }

    private async Task SaveBookmarks()
    {
        var bms = _bookmarks.Where(d => !string.IsNullOrEmpty(d.SturdyRef) && d.InterfaceId != 0);
        await StoredSrData.SaveAllData(LocalStorage, bms.ToList());
    }

    private bool IsConnected(StoredSrData data)
    {
        if (!SturdyRef2Services.TryGetValue(data.SturdyRef, out var proxy)) return false;
        return proxy is { IsNull: false, IsDisposed: false };
    }

    private async Task Connect(StoredSrData data)
    {
        try
        {
            // don't connect if we don't know the interface type
            // or we are already connected
            if (!InterfaceIdToType.ContainsKey(data.InterfaceId)) return;
            if (IsConnected(data)) return;

            var t = InterfaceIdToType[data.InterfaceId];
            var method = ConMan.GetType().GetMethod(nameof(ConnectionManager.Connect));
            var generic = method?.MakeGenericMethod(t);
            if (generic == null) return;
            var service = await generic.InvokeAsync(ConMan, data.SturdyRef);
            if (service is Proxy p) SturdyRef2Services[data.SturdyRef] = p;
            Console.WriteLine("Connected to service @ " + data.SturdyRef);
            if (ConnectedToInterfaceIdAndSturdyRefAndPetNameChanged.HasDelegate)
                _ =
                    ConnectedToInterfaceIdAndSturdyRefAndPetNameChanged.InvokeAsync((data.InterfaceId, data.SturdyRef, data.PetName));
        }
        catch (RpcException)
        {
            Console.WriteLine("Couldn't connect to channel starter service @ " + data.SturdyRef);
        }

        StateHasChanged();
    }


    private async Task Delete(StoredSrData data)
    {
        if (!_bookmarks.Remove(data)) return;
        await SaveBookmarks();
        StateHasChanged();
    }

    private void Close()
    {
        MudDialog?.Close();
    }


}
